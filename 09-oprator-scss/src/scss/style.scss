// ! ================== Operator Scss ==========
// 1. Assignment Operator (:)

// $test: black;
// body {
//     color: $test;
//     padding: 2px;
// }
//===============================================
// 2. Math Operator  -> + - * / %
// 2.1 -> +

// $num-1: 10em;
// $num-2: 20rem;

// body {
//     padding: $num-1 + $num-2;
// }

// 2.3 -> -
// $num-1: 10px;
// $num-2: 20em;

// body {
//     padding: $num-1 - $num-2;
// }

// $margin: 1rem;
// $padding: 1rem;
// body {
//     margin: $margin + 0.2rem;
//     padding: $padding - 0.5rem;
// }

// 2.3-> *
// $num-1: 10rem;
// $num-2: 20px;
// $num-2: 20;

// body {
//     padding: $num-1 * $num-2;
//     margin: $num-2 * $num-1;
// }

//2.4 -> /
// $num-1: 40px;
// $num-2: 20px;

// body {
//     padding: ($num-1 / $num-2);
// }

// 2.5 -> %
// $num-1:30px;
// $num-2:11px;

// body{
//     padding: ($num-1 % $num-2);
// }
//===============================================
// 3. string Operator (+ concatenation, -)

// $str-1: "ali";
// $str-2: "shahbaz";
// $result: $str-1 + $str-2;

// $str-1: "ali";
// $str-2: shahbaz;
// $result: $str-1 + $str-2;

// $str-1: ali;
// $str-2: "shahbaz";
// $result: $str-1 + $str-2;

// $str-1: 43;
// $str-2: "shahbaz";
// $result: $str-1 + $str-2;

// $str-1: 43;
// $str-2: shahbaz;
// $result: $str-1 + $str-2;

// $str-1: "ali";
// $str-2: "shahbaz";
// $str-3: "scss";
// $result: $str-1 + $str-2 + $str-3;

// body {
//     background: $result;
//     color: type-of($value: $result);
// }
//==============================================
// 4; comparison Operator (== , !=)
// comparison Operator -> result bool true false
// comparison -> check value , check datatype
// $num: 20;

// .body {
//     $result: $num == 20;
//     background: $result;
//     color: type-of($value: $result);
// }

// $num: 20;

// body {
//     $result: $num == "20";
//     background: $result;
//     color: type-of($value: $result);
// }

// $name: "ali";
// body {
//     $result: $name == "ali";
//     background: $result;
//     color: type-of($value: $result);
// }

// $num: 20;

// .body {
//     $result: $num != 20;
//     background: $result;
//     color: type-of($value: $result);
// }

// $num: 20;

// .body {
//     $result: $num != '20';
//     background: $result;
//     color: type-of($value: $result);
// }
//==============================================
// 5. Relational Operator ( > , < ,<= , >= )
// result -> Boolean true false

// $age: 200;

// body {
//     $result: $age > 30;
//     background: $result;
//     color: type-of($value: $result);
// }

// $age: 20;

// body {
//     $result: $age > '30';
//     background: $result;
//     color: type-of($value: $result);
// }

// $age: 30;
// body {
//     $result: $age < 30;
//     background: $result;
//     color: type-of($value: $result);
// }

// $age: 30;
// body {
//     $result: $age <= 30;
//     background: $result;
//     color: type-of($value: $result);
// }

// $age: -300;
// body {
//     $result: $age >= 30;
//     background: $result;
//     color: type-of($value: $result);
// }

//================================================
// comparison and relational operator in scss
// Scss: px rem s ms ,...

// $num-1: 200px;
// $num-2: 200px;

// html {
//     font-size: 10px;
// }
// $num-1: 20rem;  // 200px
// $num-2: 200px;

// $num-1: 10mm;
// $num-2: 1cm;

// $num-1: 1000ms;
// $num-2: 1s;

// body {
//     $result: $num-1 == $num-2;
//     background: $result;
//     color: type-of($value: $result);
//     padding: $num-1;
// }

// $num-1: 20px;

// body {
//     padding: $num-1;
// }

// $num-1: 20;
// $num-2: 10rem;

// body {
//     $result: $num-1 > $num-2;
//     background: $result;
//     color: type-of($value: $result);
// }

// $num-1: 1s;
// $num-2: 97rem;

// body {
//     $result: $num-1 == $num-2;
//     background: $result;
//     color: type-of($value: $result);
// }
//===============================================
// 6. logical operator (and or not)
// result logical operator -> boolean true false

// $num-1: 100;
// $num-2: 400;

// body {
//     $result: $num-1 > 100 and $num-2 > 1000;
//     background: $result;
//     color: type-of($value: $result);
// }

// $num-1: 100;
// $num-2: 400;

// body {
//     $result: $num-1 > 100 or $num-2 > 1000;
//     background: $result;
//     color: type-of($value: $result);
// }

// body{
//     color: not true;
//     background: not false;
//     padding: true and false;
//     margin: false or false;
// }
// $num-2: 400;
// body {
//     color: not null;
//     background:not ( null and $num-2 > 100);
// }

//================================================
// interpolation #{}
// interpolation -> return datatype string

// $active: "active";
// $col: 3;

// p.#{$active} {
//     color: red;
//     font-family: "sans #{$col}";
// }

// body {
//     $result: $col + px;
//     padding: $result;
//     background:type-of($value: $result);
//     margin: $result + 10px;
// }
//================================================
